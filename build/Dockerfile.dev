# To build and publish the image
#   docker build -t mariolet/operator-sdk:0.11.0 -f build/Dockerfile.dev ./build
#   docker push mariolet/operator-sdk:0.11.0

FROM golang:1.13-stretch

ENV OPERATOR_SDK_VERSION=v0.11.0
ENV OPERATOR_SDK_RELEASE_URL=https://github.com/operator-framework/operator-sdk/releases/download

ENV KUBECTL_VERSION v1.16.0
ENV KUBECTL_RELEASE_URL https://storage.googleapis.com/kubernetes-release/release/

ENV DEVELOPER user

RUN curl -sLO ${OPERATOR_SDK_RELEASE_URL}/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu && \
  chmod +x operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu && mkdir -p /usr/local/bin/ && \
  cp operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu /usr/local/bin/operator-sdk && \
  rm operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu

# ENV KEY_ID=0CF50BEE7E4DF6445E08C0EA9AFDE59E90D2B445
# RUN curl -sLO ${OPERATOR_SDK_RELEASE_URL}/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu.asc && \
#   gpg --recv-key "${KEY_ID}" && \
#   gpg --verify operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu.asc && \
#   rm operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu.asc

RUN curl -sLO ${KUBECTL_RELEASE_URL}/${KUBECTL_VERSION}/bin/linux/amd64/kubectl && \
  chmod +x ./kubectl && \
  mv ./kubectl /usr/local/bin/kubectl

USER 0
# Set permissions on /etc/passwd and /home to allow arbitrary users to write
COPY [--chown=0:0] entrypoint.dev.sh /
RUN mkdir -p /home/${DEVELOPER} && chgrp -R 0 /home && chmod -R g=u /etc/passwd /home && chmod +x /entrypoint.dev.sh

RUN git clone https://github.com/l0rd/operator-hello-world.git /tmp/src/github.com/l0rd/operator-hello-world/ && \
  cd /tmp/src/github.com/l0rd/operator-hello-world && \
  go build -o /tmp/src/github.com/l0rd/operator-hello-world/build/_output/bin/operator-hello-world \
     -gcflags all=-trimpath=/tmp/src/github.com/l0rd \
     -asmflags all=-trimpath=/tmp/src/github.com/l0rd \
     github.com/l0rd/operator-hello-world/cmd/manager && \
  rm -rf /tmp/src

# Change to developer user
WORKDIR /home/${DEVELOPER}

# Install powerline fonts and shell
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y \
    fonts-powerline \
    python \
    fontconfig \
    python-setuptools \
    python-pip && \
    pip install powerline-status

# Add the bashrc file
# RUN echo "PS1=\"$(powerline-shell $?)\"" >> /home/${DEVELOPER}/.bashrc

USER 10001
ENV HOME=/home/${DEVELOPER}
WORKDIR /projects
ENTRYPOINT [ "/entrypoint.dev.sh" ]
CMD ["tail", "-f", "/dev/null"]
